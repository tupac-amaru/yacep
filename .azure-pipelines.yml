trigger:
  branches:
    include:
    - '*' 
    exclude:
    - 'benchmarks'

variables:
  solution: 'yacep.sln'
  buildConfiguration: 'Release'
  dotnetCoreVersion: '6.0.302'


jobs:
- ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
  - job: StatusChecksOnLinux
    pool:
      vmImage: 'ubuntu-22.04'
    steps:
      - task: UseDotNet@2
        displayName: '.NET install'
        inputs:
          version: '$(dotnetCoreVersion)'
      - task: DotNetCoreCLI@2
        displayName: 'Install coverlet.console'
        inputs:
          command: custom
          custom: tool
          arguments: 'install -g coverlet.console' 
      - task: DotNetCoreCLI@2
        displayName: 'Install dotnet-reportgenerator-globaltool'
        inputs:
          command: custom
          custom: tool
          arguments: 'install -g dotnet-reportgenerator-globaltool'
      - script: dotnet test ./tests/TupacAmaru.Yacep.Test/TupacAmaru.Yacep.Test.csproj --configuration $(buildConfiguration) /p:CollectCoverage=true /p:Exclude=\"[xunit.*]*,[TupacAmaru.Yacep.Test*]*\" /p:CoverletOutputFormat=\"opencover\" /p:CoverletOutput=$(Agent.WorkFolder)/coverage/
        displayName: '.NET unit tests'
      - script: reportgenerator  "-reports:$(Agent.WorkFolder)/coverage/coverage.opencover.xml" "-targetdir:$(Agent.WorkFolder)/coverage/reports" -reporttypes:Cobertura 
        displayName: 'Generate cobertura report'
      - task: PublishCodeCoverageResults@1
        displayName: 'Upload azure pipeline code coverage report' 
        inputs:
          codeCoverageTool: cobertura
          summaryFileLocation: $(Agent.WorkFolder)/coverage/reports/Cobertura.xml
      - bash: |
          set -e
          minCodeCoverageValue=100
          value=`cat $(Agent.WorkFolder)/coverage/coverage.opencover.xml | head -n 3 |tail -n 1 | grep -oP 'sequenceCoverage="\K([0-9.]+)'`
          if [ "$value" = "$minCodeCoverageValue" ]
          then
            exit 0
          else
            echo "Line coverage is below 100%($value%)" 1>&2
            exit 1
          fi
        failOnStderr: false
        displayName: Check code coverage rate
  - job: StatusChecksOnWindows
    pool:
      vmImage: 'windows-2019'
    steps:
      - task: UseDotNet@2
        displayName: '.NET install'
        inputs:
          version: '$(dotnetCoreVersion)'
      - task: DotNetCoreCLI@2
        displayName: '.NET unit tests'
        inputs:
          command: test
          publishTestResults: false
          projects: '**/tests/TupacAmaru.Yacep.Test/*.csproj'
          arguments: '--configuration $(buildConfiguration) --logger trx --results-directory $(Agent.WorkFolder)'
      - task: PublishTestResults@2
        displayName: 'Upload unit test report' 
        inputs:
          testRunner: VSTest
          testResultsFiles: '$(Agent.WorkFolder)/*.trx'  
- ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
  - job: Linux
    pool:
      vmImage: 'ubuntu-22.04'
    steps:
      - task: UseDotNet@2
        displayName: '.NET install'
        inputs:
          version: '$(dotnetCoreVersion)'
      - task: DotNetCoreCLI@2
        displayName: 'Install coverlet.console'
        inputs:
          command: custom
          custom: tool
          arguments: 'install -g coverlet.console'
      - task: DotNetCoreCLI@2
        displayName: 'Install Codecov.Tool'
        inputs:
          command: custom
          custom: tool
          arguments: 'install -g Codecov.Tool'
      - task: DotNetCoreCLI@2
        displayName: 'Install dotnet-reportgenerator-globaltool'
        inputs:
          command: custom
          custom: tool
          arguments: 'install -g dotnet-reportgenerator-globaltool'
      - task: DotNetCoreCLI@2
        displayName: 'Install sonarscanner'
        inputs:
          command: custom
          custom: tool
          arguments: 'install -g dotnet-sonarscanner'
      - script: dotnet sonarscanner begin /k:"tupac-amaru_yacep" /o:"tupac-amaru" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="$(sonarcloud.token)" /d:sonar.cs.opencover.reportsPaths="$(Agent.WorkFolder)/coverage/coverage.opencover.xml"
        displayName: 'Config sonarscanner'    
      - task: DotNetCoreCLI@2
        displayName: '.NET build'
        inputs:
          command: build
          projects: '$(solution)'
          arguments: '--configuration $(buildConfiguration)'
      - script: dotnet test ./tests/TupacAmaru.Yacep.Test/TupacAmaru.Yacep.Test.csproj --configuration $(buildConfiguration) /p:CollectCoverage=true /p:Exclude=\"[xunit.*]*,[TupacAmaru.Yacep.Test*]*\" /p:CoverletOutputFormat=\"opencover\" /p:CoverletOutput=$(Agent.WorkFolder)/coverage/
        displayName: '.NET unit tests'
      - script: dotnet sonarscanner end /d:sonar.login="$(sonarcloud.token)"
        displayName: 'Upload sonarscanner report'
      - script: coverlet -f "$(Agent.WorkFolder)/coverage/coverage.opencover.xml" -t $(codecov.token)
        displayName: 'Upload coverage report to coverlet'
      - script: reportgenerator  "-reports:$(Agent.WorkFolder)/coverage/coverage.opencover.xml" "-targetdir:$(Agent.WorkFolder)/coverage/reports" -reporttypes:Cobertura 
        displayName: 'Generate cobertura report'
      - task: PublishCodeCoverageResults@1
        displayName: 'Upload azure pipeline code coverage report' 
        inputs:
          codeCoverageTool: cobertura
          summaryFileLocation: $(Agent.WorkFolder)/coverage/reports/Cobertura.xml
  - job: Windows
    pool:
      vmImage: 'windows-2019'
    steps:
      - task: UseDotNet@2
        displayName: '.NET install'
        inputs:
          version: '$(dotnetCoreVersion)'
      - task: DotNetCoreCLI@2
        displayName: '.NET unit tests'
        inputs:
          command: test
          publishTestResults: false
          projects: '**/tests/TupacAmaru.Yacep.Test/*.csproj'
          arguments: '--configuration $(buildConfiguration) --logger trx --results-directory $(Agent.WorkFolder)'
      - task: PublishTestResults@2
        displayName: 'Upload unit test report' 
        inputs:
          testRunner: VSTest
          testResultsFiles: '$(Agent.WorkFolder)/*.trx'  
  - job: Benchmark
    pool:
      vmImage: 'ubuntu-22.04'
    steps:
      - task: UseDotNet@2
        displayName: '.NET install'
        inputs:
          version: '$(dotnetCoreVersion)'
      - task: DotNetCoreCLI@2
        displayName: '.NET build'
        inputs:
          command: build
          projects: '**/tests/TupacAmaru.Yacep.Benchmark/*.csproj'
          arguments: '--configuration $(buildConfiguration)'
      - bash: |
          prefix=TupacAmaru.Yacep.Benchmark.
          prefixLength=${#prefix}
          finishedTasks=benchmarks
          readme="# This file was generated by [Azure Pipelines](https://dev.azure.com/tupac-amaru/yacep/_build/latest?definitionId=5&branchName=master)"
          mkdir $(Agent.HomeDirectory)/benchmark-reports
          git config --global user.name "codemonk"
          git config --global user.email "codemonk@live.cn"
          git init $(Agent.HomeDirectory)/benchmark-reports/
          for benchmarkName in `dotnet run  --project ./tests/TupacAmaru.Yacep.Benchmark --list flat`
            do 
              realName=${benchmarkName%.*}
              filename=${realName:$prefixLength}
              filename=${filename:0:0-9}
              if [[ $benchmarkName =~ "CompoundValue" ]]
              then
                if [[ $finishedTasks =~ $realName ]]; then
                  echo "$benchmarkName has finished in $realName"
                else 
                  echo "run benchmark for $realName"
                  dotnet run  --project ./tests/TupacAmaru.Yacep.Benchmark \
                              -c Release \
                              --artifacts ./results/benchmark/ \
                              -j Dry \
                              --unrollFactor 4 \
                              --invocationCount 8 \
                              --warmupCount 1 \
                              -i true \
                              --strategy Throughput \
                              --stopOnFirstError true \
                              -e GitHub \
                              --iterationCount 200 \
                              --filter \*$realName\* >/dev/null 
                  cat ./results/benchmark/results/$realName-report-github.md
                  readme=$readme"\n\n## $filename\n\n`cat ./results/benchmark/results/$realName-report-github.md`"
                  finishedTasks=$finishedTasks","$realName
                fi
              else
                echo "run benchmark for $benchmarkName"
                dotnet run  --project ./tests/TupacAmaru.Yacep.Benchmark \
                            -c Release \
                            --artifacts ./results/benchmark/ \
                            -j Dry \
                            --unrollFactor 4 \
                            --invocationCount 8 \
                            --warmupCount 1 \
                            -i true \
                            --strategy Throughput \
                            --stopOnFirstError true \
                            -e GitHub \
                            --iterationCount 200 \
                            --filter \*$benchmarkName\* >/dev/null 
                cat ./results/benchmark/results/$realName-report-github.md
                readme=$readme"\n\n## $filename\n\n`cat ./results/benchmark/results/$realName-report-github.md`"
              fi
            done
          cd $(Agent.HomeDirectory)/benchmark-reports/
          cat > README.md <<EOF
          `echo -e "${readme}"`


          ## Thanks
          Powerful .NET library for benchmarking-[BenchmarkDotNet](https://github.com/dotnet/BenchmarkDotNet)
          EOF
          git add README.md
          git status
          git commit -m "upload benchmark reports [skip ci]"
          git push -f "https://$(github.pat)@github.com/tupac-amaru/yacep.git" master:_benchmark
        failOnStderr: false
        displayName: Generate benchmark reports
  - job: Publish
    dependsOn:
      - Linux
      - Windows
    pool:
      vmImage: 'ubuntu-22.04' 
    variables:
      isPushblish: false 
    steps:
      - bash: |
          set -e
          if git log --no-merges -1 --format='%B' | grep -q 'bump version'; then
            echo "##vso[task.setvariable variable=isPushblish]true"
          fi
          exit 0
        failOnStderr: true
        displayName: Check if bump version commit
      - task: DotNetCoreCLI@2
        displayName: 'Create NuGet packages'
        inputs:
          command: pack
          projects: '**/src/TupacAmaru.Yacep/*.csproj'
          arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/artifact'
        condition: eq(variables['isPushblish'], True)
      - task: NuGetCommand@2
        displayName: 'Publish NuGet packages'
        inputs:
          command: push
          nuGetFeedType: external
          publishFeedCredentials: pushToNuget
        condition: eq(variables['isPushblish'], True)